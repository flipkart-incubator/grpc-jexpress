plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 5.6 OR HIGHER. Use plugin version 0.8.10 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.15'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

group = 'com.flipkart.grpc-jexpress.example'
version = '1.0-SNAPSHOT'

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/"
    }
    mavenCentral()
    mavenLocal()
}

def jexpressVersion = '1.40-SNAPSHOT'
def grpcVersion = '1.60.0'
def protobufVersion = '3.25.2'
def protocVersion = protobufVersion 

dependencies {
    //For Development
    implementation project(':core')
    implementation project(':runtime')
    implementation project(':guice')

    // In actual
    // implementation "com.flipkart.grpc-jexpress:core:${jexpressVersion}"
    // implementation "com.flipkart.grpc-jexpress:runtime:${jexpressVersion}"
    // implementation "com.flipkart.grpc-jexpress:guice:${jexpressVersion}"

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.dropwizard.metrics5:metrics-healthchecks:5.0.0"
    implementation "io.dropwizard.metrics5:metrics-annotation:5.0.0"
    implementation "com.palominolabs.metrics:metrics-guice:5.0.1"
    implementation 'ru.vyarus:guice-validator:1.2.0'
    implementation 'org.hibernate:hibernate-validator:5.4.2.Final'
    implementation 'org.glassfish:javax.el:3.0.1-b08'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
    implementation 'org.projectlombok:lombok:1.18.30'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.6'
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.7'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

test {
    useJUnitPlatform()
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
startScripts.enabled = false

task helloWorldServer(type: CreateStartScripts) {
    mainClass = 'com.flipkart.gjex.examples.helloworld.HelloWorldApplication'
    applicationName = 'hello-world-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task runHelloWorldServer(type: JavaExec) {
    group = "Execution"
    description = "run hello-world-server"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.flipkart.gjex.examples.helloworld.HelloWorldApplication'
    args "server", "./src/main/resources/hello_world_config.yml"
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
}


task helloWorldClient(type: CreateStartScripts) {
    mainClass = 'com.flipkart.gjex.examples.helloworld.client.HelloWorldClient'
    applicationName = 'hello-world-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task runHelloWorldClient(type: JavaExec) {
    group = "Execution"
    description = "run hello-world-client"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.flipkart.gjex.examples.helloworld.client.HelloWorldClient'
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
}

applicationDistribution.into('bin') {
    from(helloWorldServer)
    from(helloWorldClient)
    fileMode = 0755
}

